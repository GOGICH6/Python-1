import telebot
from telebot import types
import requests

TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ APK –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
GAMES = {
    "Oxide: Survival Island": {
        "android": "https://t.me/+dxcSK08NRmxjNWRi",
        "ios": "https://t.me/+U3QzhcTHKv1lNmMy"
    },
    "Standoff 2": {
        "android": None,
        "ios": None
    }
}

# –ö–∞–Ω–∞–ª—ã
REQUIRED_CHANNELS = {
    "2 –∫–∞–Ω–∞–ª": "https://t.me/ChatByOxide",
    "3 –∫–∞–Ω–∞–ª": "https://t.me/Oxide_Vzlom"
}
NO_CHECK_CHANNEL = {"1 –∫–∞–Ω–∞–ª": "https://t.me/+gQzXZwSO5cliNGJi"}

# –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥—É
SHARE_TEXT = "‚Äì –º–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Oxide: Survival Island! ‚ù§Ô∏è"

# –ü–∞–º—è—Ç—å: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
user_state = {}

def is_subscribed(user_id):
    for _, link in REQUIRED_CHANNELS.items():
        username = link.split("/")[-1]
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{username}&user_id={user_id}"
        res = requests.get(url).json()
        if res.get('result', {}).get('status') not in ['member', 'administrator', 'creator']:
            return False
    return True

# START
@bot.message_handler(commands=['start'])
def start_handler(message):
    if message.chat.type != "private":
        return
    user_id = message.from_user.id
    remove_old_message(user_id)

    markup = types.InlineKeyboardMarkup()
    for game in GAMES:
        markup.add(types.InlineKeyboardButton(game, callback_data=f"game:{game}"))

    msg = bot.send_message(message.chat.id, "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É:*", parse_mode="Markdown", reply_markup=markup)
    user_state[user_id] = {"step": "game", "msg_id": msg.message_id}

# –í—ã–±–æ—Ä –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("game:"))
def game_selected(call):
    user_id = call.from_user.id
    game = call.data.split("game:")[1]
    user_state[user_id] = {"game": game}

    remove_old_message(user_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üì± Android", callback_data="os:android"),
        types.InlineKeyboardButton("üçè iOS", callback_data="os:ios")
    )
    msg = bot.send_message(call.message.chat.id, f"üì≤ *–í—ã –≤—ã–±—Ä–∞–ª–∏:* {game}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–°:", parse_mode="Markdown", reply_markup=markup)
    user_state[user_id]["msg_id"] = msg.message_id

# –í—ã–±–æ—Ä –û–°
@bot.callback_query_handler(func=lambda call: call.data.startswith("os:"))
def os_selected(call):
    user_id = call.from_user.id
    os_type = call.data.split("os:")[1]
    game = user_state.get(user_id, {}).get("game")

    remove_old_message(user_id)

    if not game:
        bot.send_message(call.message.chat.id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
        return

    link = GAMES[game].get(os_type)
    if not link:
        bot.send_message(call.message.chat.id, "‚ùå –§–∞–π–ª –¥–ª—è —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –∏–≥—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup(row_width=3)
        for name, link in {**NO_CHECK_CHANNEL, **REQUIRED_CHANNELS}.items():
            markup.add(types.InlineKeyboardButton(name, url=link))
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
        msg = bot.send_message(call.message.chat.id, "üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:*", parse_mode="Markdown", reply_markup=markup)
        user_state[user_id]["msg_id"] = msg.message_id
        user_state[user_id]["waiting_link"] = link
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=SHARE_TEXT))
    bot.send_message(call.message.chat.id,
                     f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
                     f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({link})\n\n"
                     f"‚ö† *–ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –∏–Ω–∞—á–µ –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ –ß–°!*",
                     parse_mode="Markdown", reply_markup=markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    user_id = call.from_user.id
    link = user_state.get(user_id, {}).get("waiting_link")

    if is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=SHARE_TEXT))
        bot.send_message(call.message.chat.id,
                         f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
                         f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({link})\n\n"
                         f"‚ö† *–ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –∏–Ω–∞—á–µ –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ –ß–°!*",
                         parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "‚ùå *–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!*", parse_mode="Markdown")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def remove_old_message(user_id):
    data = user_state.get(user_id)
    if data and "msg_id" in data:
        try:
            bot.delete_message(user_id, data["msg_id"])
        except:
            pass

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
    
