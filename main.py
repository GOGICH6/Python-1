import os
import telebot
import requests
import psycopg2
from datetime import datetime
from telebot import types

# –î–∞–Ω–Ω—ã–µ
BOT_TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
ADMIN_ID = 1903057676
DB_URL = "postgresql://neondb_owner:npg_G3VCfRiD0uwB@ep-late-sunset-a5ktl08d-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require"

bot = telebot.TeleBot(BOT_TOKEN)
conn = psycopg2.connect(DB_URL)
conn.autocommit = True
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
""")

# ‚úÖ –í—ã–±–æ—Ä –∏–≥—Ä—ã
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    cursor.execute("INSERT INTO users (user_id) VALUES (%s) ON CONFLICT DO NOTHING", (user_id,))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Oxide", callback_data="game_oxide"))
    markup.add(types.InlineKeyboardButton("Standoff 2", callback_data="game_standoff"))
    bot.send_message(message.chat.id, "üéÆ *–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É:*", parse_mode="Markdown", reply_markup=markup)

# ‚úÖ –í—ã–±–æ—Ä –û–°
@bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
def select_os(call):
    game = "Oxide" if call.data == "game_oxide" else "Standoff 2"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì± Android", callback_data=f"os_{game}_Android"))
    markup.add(types.InlineKeyboardButton("üçè iOS", callback_data=f"os_{game}_iOS"))
    bot.edit_message_text("üîπ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:*", call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup)

# ‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –ê–ü–ö
APK_LINKS = {
    "Oxide": {"Android": "https://t.me/+dxcSK08NRmxjNWRi", "iOS": "https://t.me/+U3QzhcTHKv1lNmMy"},
    "Standoff 2": {"Android": "https://t.me/+fgN29Y8PjTNhZWFi", "iOS": None}
}

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("os_"))
def check_subscription(call):
    _, game, system = call.data.split("_")
    apk_link = APK_LINKS.get(game, {}).get(system)

    if not apk_link:
        bot.edit_message_text("‚ùå *–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ APK –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*", call.message.chat.id, call.message.message_id, parse_mode="Markdown")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_sub_{game}_{system}"))
    bot.edit_message_text("üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*", call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup)

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—ã–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("check_sub_"))
def send_apk_link(call):
    _, game, system = call.data.split("_")
    apk_link = APK_LINKS.get(game, {}).get(system)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query="–ú–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç! ‚ù§Ô∏è"))
    bot.edit_message_text(f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!*\nüîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({apk_link})", call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup)

# ‚úÖ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
def admin_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    markup.add(types.InlineKeyboardButton("üì© –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
    return markup

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(message.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())

# ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê
@bot.callback_query_handler(func=lambda c: c.data == "admin_stats")
def stats_handler(call):
    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE registration_time >= NOW() - INTERVAL '24 hours'")
    day = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE registration_time >= NOW() - INTERVAL '48 hours'")
    two_days = cursor.fetchone()[0]
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\nüë• –í—Å–µ–≥–æ: <b>{total}</b>\nüïí 24—á: <b>{day}</b>\nüïí 48—á: <b>{two_days}</b>"
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=admin_menu())

# ‚úÖ –†–ê–°–°–´–õ–ö–ê (–∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
broadcast_cache = {}

@bot.callback_query_handler(func=lambda c: c.data == "admin_broadcast")
def ask_broadcast(call):
    bot.send_message(call.from_user.id, "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    broadcast_cache[call.from_user.id] = "wait_message"

@bot.message_handler(func=lambda m: broadcast_cache.get(m.from_user.id) == "wait_message")
def confirm_broadcast(message):
    broadcast_cache[message.from_user.id] = message
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="broadcast_confirm"))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="broadcast_cancel"))
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º?", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("broadcast_"))
def do_broadcast(call):
    if call.data == "broadcast_confirm":
        msg = broadcast_cache.get(call.from_user.id)
        cursor.execute("SELECT user_id FROM users")
        user_ids = cursor.fetchall()
        sent, failed = 0, 0
        for (uid,) in user_ids:
            try:
                bot.copy_message(uid, msg.chat.id, msg.message_id)
                sent += 1
            except:
                failed += 1
        bot.send_message(call.from_user.id, f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n‚ùå –û—à–∏–±–∫–∏: {failed}")
    else:
        bot.send_message(call.from_user.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    broadcast_cache.pop(call.from_user.id, None)

# ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id, "ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ /admin.")

# ‚úÖ –ó–ê–ü–£–°–ö –ë–û–¢–ê
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
    
