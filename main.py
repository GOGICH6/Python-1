import telebot
import requests
from telebot import types

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –ö–∞–Ω–∞–ª—ã
NO_CHECK_CHANNEL = {"1 –∫–∞–Ω–∞–ª": "https://t.me/+gQzXZwSO5cliNGJi"}  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
REQUIRED_CHANNELS = {
    "2 –∫–∞–Ω–∞–ª": "https://t.me/ChatByOxide",
    "3 –∫–∞–Ω–∞–ª": "https://t.me/Oxide_Vzlom"
}
DOWNLOAD_CHANNEL_LINK = "https://t.me/+dxcSK08NRmxjNWRi"  # –°—Å—ã–ª–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ APK
GAMES = {
    "Oxide: Survival Island": {
        "Android": "https://example.com/oxide_android.apk",
        "iOS": None
    },
    "Standoff 2": {
        "Android": "https://example.com/standoff2_android.apk",
        "iOS": "https://example.com/standoff2_ios.ipa"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id):
    for channel_name, channel_link in REQUIRED_CHANNELS.items():
        channel_username = channel_link.split("/")[-1]
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{channel_username}&user_id={user_id}"
        response = requests.get(url).json()
        status = response.get('result', {}).get('status')
        if status not in ['member', 'administrator', 'creator']:
            return False  
    return True  

# –õ–æ–≤–∏–º /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.chat.type != "private":  
        return  

    user_id = message.from_user.id

    if is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(game, callback_data=f"game_{game}") for game in GAMES]
        markup.add(*buttons)

        bot.send_message(
            message.chat.id, 
            "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥:*",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup(row_width=3)
        buttons = [types.InlineKeyboardButton(name, url=link) for name, link in {**NO_CHECK_CHANNEL, **REQUIRED_CHANNELS}.items()]
        markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

        bot.send_message(
            message.chat.id,
            "üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".*",
            parse_mode="Markdown",
            reply_markup=markup
        )

# –í—ã–±–æ—Ä –û–°
@bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
def choose_os(call):
    game_name = call.data.replace("game_", "")

    markup = types.InlineKeyboardMarkup()
    android_button = types.InlineKeyboardButton("üì± Android", callback_data=f"os_Android_{game_name}")
    ios_button = types.InlineKeyboardButton("üçè iOS", callback_data=f"os_iOS_{game_name}")
    markup.add(android_button, ios_button)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üî∑ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:*",
        parse_mode="Markdown",
        reply_markup=markup
    )

# –í—ã–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ APK
@bot.callback_query_handler(func=lambda call: call.data.startswith("os_"))
def send_apk_link(call):
    _, os_type, game_name = call.data.split("_")

    if GAMES[game_name][os_type]:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ *–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è {os_type}:*\n\nüîó {GAMES[game_name][os_type]}",
            parse_mode="Markdown"
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, APK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!*",
            parse_mode="Markdown"
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id

    if is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(game, callback_data=f"game_{game}") for game in GAMES]
        markup.add(*buttons)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥:*",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        bot.send_message(
            call.message.chat.id,
            "‚ùå *–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    bot.infinity_polling()
