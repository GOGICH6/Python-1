import os
import telebot
import requests
import psycopg2
from telebot import types
from datetime import datetime

# –î–∞–Ω–Ω—ã–µ
BOT_TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
ADMIN_ID = 1903057676
DB_URL = "postgresql://neondb_owner:npg_G3VCfRiD0uwB@ep-late-sunset-a5ktl08d-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require"

bot = telebot.TeleBot(BOT_TOKEN)
conn = psycopg2.connect(DB_URL)
conn.autocommit = True
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
""")

def register_user(user_id):
    cursor.execute("INSERT INTO users (user_id) VALUES (%s) ON CONFLICT DO NOTHING", (user_id,))

# –ö–∞–Ω–∞–ª—ã
NO_CHECK_CHANNEL = {"1 –∫–∞–Ω–∞–ª": "https://t.me/+gQzXZwSO5cliNGJi"}
REQUIRED_CHANNELS = {
    "2 –∫–∞–Ω–∞–ª": "https://t.me/ChatByOxide",
    "3 –∫–∞–Ω–∞–ª": "https://t.me/Oxide_Vzlom"
}

# –°—Å—ã–ª–∫–∏
APK_LINKS = {
    "Oxide": {
        "Android": "https://t.me/+dxcSK08NRmxjNWRi",
        "iOS": "https://t.me/+U3QzhcTHKv1lNmMy"
    },
    "Standoff 2": {
        "Android": "https://t.me/+fgN29Y8PjTNhZWFi",
        "iOS": None
    }
}

# –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
SHARE_TEXT = "‚Äì –º–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Oxide! ‚ù§Ô∏è"

# –°–ª–æ–≤–∞—Ä—å –≤—ã–±–æ—Ä–∞
user_data = {}

def is_subscribed(user_id):
    try:
        for channel_link in REQUIRED_CHANNELS.values():
            channel_username = channel_link.split("/")[-1]
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember?chat_id=@{channel_username}&user_id={user_id}"
            r = requests.get(url).json()
            status = r.get("result", {}).get("status")
            if status not in ["member", "administrator", "creator"]:
                return False
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        if message.chat.type != "private":
            return

        register_user(message.from_user.id)
        if message.from_user.id not in user_data:
            user_data[message.from_user.id] = {}

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("Oxide", callback_data="game_oxide"),
            types.InlineKeyboardButton("Standoff 2", callback_data="game_standoff")
        )

        bot.send_message(
            message.chat.id,
            "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É:*",
            parse_mode="Markdown",
            reply_markup=markup
        )
        print(f"/start —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {message.from_user.id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /start —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
def select_game(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {}

    game = "Oxide" if call.data == "game_oxide" else "Standoff 2"
    user_data[user_id]["game"] = game

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üì± Android", callback_data="system_android"),
        types.InlineKeyboardButton("üçè iOS", callback_data="system_ios")
    )

    bot.edit_message_text(
        "üîπ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:*",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )
@bot.callback_query_handler(func=lambda call: 
call.data.startswith("system_"))
def select_system(call):
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        return

    system = "Android" if call.data == "system_android" else "iOS"
    user_data[user_id]["system"] = system

    game = user_data[user_id].get("game")
    apk_link = APK_LINKS.get(game, {}).get(system)

    if not apk_link:
        bot.edit_message_text(
            "‚ùå *–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ APK –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
        return

    if is_subscribed(user_id):
        send_download_menu(call, game, system, apk_link)
    else:
        send_subscription_request(call.message)

def send_subscription_request(message):
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(name, url=link)
        for name, link in {**NO_CHECK_CHANNEL, **REQUIRED_CHANNELS}.items()
    ]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

    bot.send_message(
        message.chat.id,
        "üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".*",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id
    game = user_data.get(user_id, {}).get("game")
    system = user_data.get(user_id, {}).get("system")
    apk_link = APK_LINKS.get(game, {}).get(system)

    if not game or not system:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –∏–ª–∏ —Å–∏—Å—Ç–µ–º—É.")
        return

    if not apk_link:
        bot.send_message(call.message.chat.id, "‚ùå APK –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    if is_subscribed(user_id):
        send_download_menu(call, game, system, apk_link)
    else:
        bot.send_message(
            call.message.chat.id,
            "‚ùå *–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )

def send_download_menu(call, game, system, apk_link):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=SHARE_TEXT))
    markup.add(types.InlineKeyboardButton("‚ÑπÔ∏è –û–± –º–æ–¥–µ", callback_data="about_mod"))

    bot.edit_message_text(
        f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
        f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({apk_link})\n\n"
        f"‚ö† *–í–∞–∂–Ω–æ!* –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–∞—Å –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –∏ *–¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–° –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö!*",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "about_mod")
def about_mod(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="check_subscription")
    )

    game = user_data.get(call.from_user.id, {}).get("game", "–º–æ–¥–∞")
    bot.edit_message_text(
        f"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ –¥–ª—è {game} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.**",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "support")
def support(call):
    bot.send_message(
        call.message.chat.id,
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: <b>@Oxide_Vzlom_bot</b>",
        parse_mode="HTML"
    )

# ========== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ==========
def get_stats():
    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE registration_time >= NOW() - INTERVAL '24 hours'")
    day = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE registration_time >= NOW() - INTERVAL '48 hours'")
    two_days = cursor.fetchone()[0]
    return total, day, two_days

def admin_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("üì© –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    )
    return markup

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(message.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())

@bot.callback_query_handler(func=lambda c: c.data == "admin_stats")
def stats_handler(call):
    total, day, two_days = get_stats()
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"üïí –ó–∞ 24 —á–∞—Å–∞: <b>{day}</b>\n"
        f"üïí –ó–∞ 48 —á–∞—Å–æ–≤: <b>{two_days}</b>"
    )
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=admin_menu())

broadcast_cache = {}

@bot.callback_query_handler(func=lambda c: c.data == "admin_broadcast")
def ask_broadcast(call):
    bot.send_message(call.from_user.id, "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    broadcast_cache[call.from_user.id] = "wait_message"

@bot.message_handler(func=lambda m: broadcast_cache.get(m.from_user.id) == "wait_message")
def confirm_broadcast(message):
    broadcast_cache[message.from_user.id] = message
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="broadcast_confirm"))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="broadcast_cancel"))
    bot.send_message(message.chat.id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º?", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("broadcast_"))
def do_broadcast(call):
    if call.data == "broadcast_confirm":
        msg = broadcast_cache.get(call.from_user.id)
        if isinstance(msg, telebot.types.Message):
            cursor.execute("SELECT user_id FROM users")
            user_ids = cursor.fetchall()
            sent = 0
            failed = 0
            for (uid,) in user_ids:
                try:
                    bot.copy_message(uid, msg.chat.id, msg.message_id)
                    sent += 1
                except:
                    failed += 1
            bot.send_message(call.from_user.id, f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")
        broadcast_cache.pop(call.from_user.id, None)
    else:
        bot.send_message(call.from_user.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        broadcast_cache.pop(call.from_user.id, None)

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda msg: msg.chat.type == "private")
def unknown_command(msg):
    bot.send_message(
        msg.chat.id,
        "ü§ñ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        parse_mode="Markdown"
    )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
