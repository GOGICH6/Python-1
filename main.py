import telebot
from telebot import types
import requests
from flask import Flask
from threading import Thread
from datetime import datetime

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
GAME_INFO = {
    "Oxide Survival Island": {
        "link": "https://t.me/+X5HG9ZCxbhc4OTIy",
        "description": "–ò–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –º–∏—Ä."
    },
    "Black Russia": {
        "link": "https://t.me/+NFv32i5jI542Mjg6",
        "description": "–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏."
    },
    "Standoff 2": {
        "link": None,
        "description": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —à—É—Ç–µ—Ä —Å —Ä–µ–∂–∏–º–∞–º–∏ PvP –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π."
    },
    "Brawl Stars": {
        "link": None,
        "description": "–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –±–∏—Ç–≤–∞–º–∏ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏."
    }
}

# –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL = {
    "name": "Oxide Vzlom",
    "link": "https://t.me/Oxide_Vzlom",
    "username": "@Oxide_Vzlom"
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
def is_subscribed(user_id):
    url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id={CHANNEL['username']}&user_id={user_id}"
    response = requests.get(url).json()
    if response.get('result', {}).get('status') in ['member', 'administrator', 'creator']:
        return True
    return False

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            "username": message.from_user.username,
            "registration_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "invites": 0,
            "referral_link": f"https://t.me/{bot.get_me().username}?start={user_id}"
        }

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°–ø–∏—Å–æ–∫ –∏–≥—Ä", "–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–º–æ—â—å", "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–û –Ω–∞—Å"]
    markup.add(*[types.KeyboardButton(button) for button in buttons])
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∏–≥—Ä"
@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∏–≥—Ä")
def show_game_list(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for game in GAME_INFO.keys():
        markup.add(types.KeyboardButton(game))
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É:", reply_markup=markup)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
@bot.message_handler(func=lambda message: message.text in GAME_INFO.keys())
def send_game_info(message):
    game_name = message.text
    user_id = message.from_user.id

    if not is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(CHANNEL["name"], url=CHANNEL["link"]))
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ", callback_data=f"check_{game_name}"))
        bot.send_message(
            message.chat.id,
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–≥—Ä—ã.",
            reply_markup=markup
        )
    else:
        send_game_link(message, game_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("check_"))
def check_subscription(call):
    user_id = call.from_user.id
    game_name = call.data.split("_")[1]

    if is_subscribed(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
        send_game_link(call.message, game_name)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(CHANNEL["name"], url=CHANNEL["link"])
            )
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É
def send_game_link(message, game_name):
    game_info = GAME_INFO.get(game_name)
    link = game_info["link"]
    description = game_info["description"]

    markup = types.InlineKeyboardMarkup()
    if link:
        markup.add(types.InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", url=link))
    markup.add(types.InlineKeyboardButton("–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", callback_data="how_to_install"))

    response = f"üéÆ –ò–≥—Ä–∞: {game_name}\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
    if not link:
        response += "\n‚ÄºÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–π APK –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    bot.send_message(message.chat.id, response, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def profile_info(message):
    user_info = user_data.get(message.from_user.id)
    if user_info:
        response = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–¢–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_info['username']}\n"
            f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['registration_time']}\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {user_info['invites']}\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user_info['referral_link']}"
        )
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def help_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        ("–ì—É–≥–ª –≤—Ö–æ–¥ —Å —á–∏—Ç–æ–º", "google_login_cheat"),
        ("–†–∞–∑–±–∞–Ω –∞–∫–∫–∞—É–Ω—Ç–∞", "account_unban"),
        ("–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", "how_to_install"),
        ("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?", "how_to_use")
    ]
    markup.add(*[types.InlineKeyboardButton(text, callback_data=data) for text, data in buttons])
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    responses = {
        "google_login_cheat": (
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Oxide –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
            "2. –í—ã–π–¥–∏—Ç–µ –∏–∑ –∏–≥—Ä—ã –∏ —É–¥–∞–ª–∏—Ç–µ –µ—ë.\n"
            "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∏—Ç –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É —á–µ—Ä–µ–∑ Google.\n"
            "4. –ì–æ—Ç–æ–≤–æ!"
        ),
        "account_unban": "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞: https://t.me/Oxide_Vzlom/2327",
        "how_to_install": "–£–¥–∞–ª–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π APK –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä.",
        "how_to_use": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    }
    bot.send_message(call.message.chat.id, responses.get(call.data, "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å."))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def go_back(message):
    start_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@bot.message_handler(func=lambda message: message.text == "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
def tech_support(message):
    bot.send_message(
        message.chat.id,
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑: @Oxide_Vzlom_bot.\n"
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@bot.message_handler(func=lambda message: message.text == "–û –Ω–∞—Å")
def about_bot(message):
    response = (
        "‚ÑπÔ∏è –û –±–æ—Ç–µ:\n"
        "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤. –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö.\n\n"
        "üìå –°–µ–π—á–∞—Å –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–Ω—ã –±–∞–≥–∏ –∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞.\n\n"
        "üì∞ –í—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ: @Oxide_Vzlom.\n\n"
        "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 0.1.0"
    )
    bot.send_message(message.chat.id, response)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ Replit
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    Thread(target=run).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
keep_alive()
bot.polling(none_stop=True)
