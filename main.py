import os
import telebot
from telebot import types
import psycopg2
from datetime import datetime

# –î–∞–Ω–Ω—ã–µ
BOT_TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
ADMIN_ID = 1903057676
DB_URL = "postgresql://neondb_owner:npg_G3VCfRiD0uwB@ep-late-sunset-a5ktl08d-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require"

bot = telebot.TeleBot(BOT_TOKEN)
conn = psycopg2.connect(DB_URL)
conn.autocommit = True
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS invites (
    id SERIAL PRIMARY KEY,
    creator_id BIGINT,
    channel_id BIGINT,
    channel_title TEXT,
    invite_link TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);
""")

# üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id):
    cursor.execute("INSERT INTO users (user_id) VALUES (%s) ON CONFLICT DO NOTHING", (user_id,))

# üßÆ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats():
    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE registration_time >= NOW() - INTERVAL '24 hours'")
    day = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE registration_time >= NOW() - INTERVAL '48 hours'")
    two_days = cursor.fetchone()[0]
    return total, day, two_days

# üîò –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def admin_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("üì© –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
    )
    markup.add(
        types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="admin_create_link"),
        types.InlineKeyboardButton("üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="admin_my_links")
    )
    return markup

# üì¶ /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.chat.type != "private":
        return
    register_user(message.from_user.id)
    bot.send_message(message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É:", reply_markup=types.ReplyKeyboardRemove())

# üëÆ‚Äç‚ôÇÔ∏è /admin —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è
@bot.message_handler(commands=['admin'])
def handle_admin(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(message.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.callback_query_handler(func=lambda c: c.data == "admin_stats")
def stats_handler(call):
    total, day, two_days = get_stats()
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"üïí –ó–∞ 24 —á–∞—Å–∞: <b>{day}</b>\n"
        f"üïí –ó–∞ 48 —á–∞—Å–æ–≤: <b>{two_days}</b>"
    )
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=admin_menu())

# üì© –†–∞—Å—Å—ã–ª–∫–∞
broadcast_cache = {}

@bot.callback_query_handler(func=lambda c: c.data == "admin_broadcast")
def ask_broadcast(call):
    bot.send_message(call.from_user.id, "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    broadcast_cache[call.from_user.id] = "wait_message"

@bot.message_handler(func=lambda m: broadcast_cache.get(m.from_user.id) == "wait_message")
def confirm_broadcast(message):
    broadcast_cache[message.from_user.id] = message
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="broadcast_confirm"))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="broadcast_cancel"))
    bot.send_message(message.chat.id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º?", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("broadcast_"))
def do_broadcast(call):
    if call.data == "broadcast_confirm":
        msg = broadcast_cache.get(call.from_user.id)
        if isinstance(msg, telebot.types.Message):
            cursor.execute("SELECT user_id FROM users")
            user_ids = cursor.fetchall()
            sent = 0
            for (uid,) in user_ids:
                try:
                    bot.copy_message(uid, msg.chat.id, msg.message_id)
                    sent += 1
                except:
                    continue
            bot.send_message(call.from_user.id, f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
        broadcast_cache.pop(call.from_user.id, None)
    else:
        bot.send_message(call.from_user.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        broadcast_cache.pop(call.from_user.id, None)

# ‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
invite_stage = {}

@bot.callback_query_handler(func=lambda c: c.data == "admin_create_link")
def ask_channel_id(call):
    bot.send_message(call.from_user.id, "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –∞–¥–º–∏–Ω.")
    invite_stage[call.from_user.id] = "waiting_channel_id"

@bot.message_handler(func=lambda m: invite_stage.get(m.from_user.id) == "waiting_channel_id")
def create_link_step2(message):
    try:
        chat = bot.get_chat(int(message.text))
        if not chat.type.startswith("channel"):
            return bot.reply_to(message, "‚ùó –≠—Ç–æ –Ω–µ ID –∫–∞–Ω–∞–ª–∞.")
        invite_link = bot.create_chat_invite_link(chat.id, creates_join_request=False).invite_link
        cursor.execute("INSERT INTO invites (creator_id, channel_id, channel_title, invite_link) VALUES (%s, %s, %s, %s)", (
            message.from_user.id, chat.id, chat.title, invite_link
        ))
        bot.send_message(message.chat.id, f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ <b>{chat.title}</b>\nüîó {invite_link}", parse_mode="HTML")
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω.")
    finally:
        invite_stage.pop(message.from_user.id, None)

# üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏
@bot.callback_query_handler(func=lambda c: c.data == "admin_my_links")
def show_links(call):
    cursor.execute("SELECT channel_title, invite_link FROM invites WHERE creator_id = %s", (call.from_user.id,))
    links = cursor.fetchall()
    if not links:
        bot.send_message(call.from_user.id, "üîé –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.")
        return
    text = "<b>–í–∞—à–∏ —Å—Å—ã–ª–∫–∏:</b>\n\n"
    for i, (title, link) in enumerate(links, 1):
        text += f"{i}) <b>{title}</b>\nüîó {link}\n\n"
    bot.send_message(call.from_user.id, text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id, "ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ /admin.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
    
