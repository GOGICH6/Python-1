import telebot
import requests
from telebot import types

TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –ò–≥—Ä—ã –∏ –∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã–µ APK
GAMES = {
    "Oxide: Survival Island": {
        "key": "Oxide",
        "available_apks": ["Android", "iOS"]
    },
    "Standoff 2": {
        "key": "Standoff",
        "available_apks": ["Android"]
    }
}

# –ö–∞–Ω–∞–ª—ã
NO_CHECK_CHANNEL = {"1 –∫–∞–Ω–∞–ª": "https://t.me/+gQzXZwSO5cliNGJi"}  
REQUIRED_CHANNELS = {
    "2 –∫–∞–Ω–∞–ª": "https://t.me/ChatByOxide",
    "3 –∫–∞–Ω–∞–ª": "https://t.me/Oxide_Vzlom"
}
DOWNLOAD_CHANNEL_LINK = "https://t.me/+dxcSK08NRmxjNWRi"

# –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥—É
SHARE_TEXT = "‚Äì –º–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Oxide: Survival Island! ‚ù§Ô∏è"

# –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
user_messages = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id):
    for channel_name, channel_link in REQUIRED_CHANNELS.items():
        channel_username = channel_link.split("/")[-1]
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{channel_username}&user_id={user_id}"
        response = requests.get(url).json()
        status = response.get('result', {}).get('status')
        if status not in ['member', 'administrator', 'creator']:
            return False  
    return True  

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
def delete_old_message(chat_id):
    if chat_id in user_messages:
        try:
            bot.delete_message(chat_id, user_messages[chat_id])
        except:
            pass

# –õ–æ–≤–∏–º /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.chat.type != "private":  
        return  

    delete_old_message(message.chat.id)

    markup = types.InlineKeyboardMarkup()
    for game_name in GAMES.keys():
        markup.add(types.InlineKeyboardButton(game_name, callback_data=f"game_{GAMES[game_name]['key']}"))
    
    sent_msg = bot.send_message(
        message.chat.id,
        "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥:*",
        parse_mode="Markdown",
        reply_markup=markup
    )
    user_messages[message.chat.id] = sent_msg.message_id

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
def game_selected(call):
    delete_old_message(call.message.chat.id)

    game_key = call.data.split("_")[1]
    game_name = next((name for name, data in GAMES.items() if data["key"] == game_key), None)

    if not game_name:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã!")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for os_type in ["Android", "iOS", "Windows"]:
        emoji = "üì±" if os_type == "Android" else "üçè" if os_type == "iOS" else "üíª"
        markup.add(types.InlineKeyboardButton(f"{emoji} {os_type}", callback_data=f"os_{game_key}_{os_type}"))

    sent_msg = bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üî∑ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:*",
        parse_mode="Markdown",
        reply_markup=markup
    )
    user_messages[call.message.chat.id] = sent_msg.message_id

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –û–°
@bot.callback_query_handler(func=lambda call: call.data.startswith("os_"))
def os_selected(call):
    delete_old_message(call.message.chat.id)

    _, game_key, os_type = call.data.split("_")

    game_data = next((data for name, data in GAMES.items() if data["key"] == game_key), None)

    if not game_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –û–°!")
        return

    if os_type not in game_data["available_apks"]:
        sent_msg = bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥ –¥–ª—è —ç—Ç–æ–π –û–° –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*",
            parse_mode="Markdown"
        )
        user_messages[call.message.chat.id] = sent_msg.message_id
        return

    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [types.InlineKeyboardButton(name, url=link) for name, link in {**NO_CHECK_CHANNEL, **REQUIRED_CHANNELS}.items()]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_subscription_{game_key}_{os_type}"))

    sent_msg = bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".*",
        parse_mode="Markdown",
        reply_markup=markup
    )
    user_messages[call.message.chat.id] = sent_msg.message_id

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("check_subscription_"))
def check_subscription(call):
    delete_old_message(call.message.chat.id)

    user_id = call.from_user.id

    if is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        share_button = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=SHARE_TEXT)  
        markup.add(share_button)

        sent_msg = bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({DOWNLOAD_CHANNEL_LINK})\n\n"
            f"‚ö† *–í–∞–∂–Ω–æ!* –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–∞—Å –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –∏ *–¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–° –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö!*",
            parse_mode="Markdown",
            reply_markup=markup
        )
        user_messages[call.message.chat.id] = sent_msg.message_id
    else:
        bot.answer_callback_query(
            call.id,
            "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
@bot.message_handler(func=lambda message: message.chat.type == "private")
def handle_unknown_command(message):
    delete_old_message(message.chat.id)

    user_id = message.from_user.id

    if is_subscribed(user_id):
        sent_msg = bot.send_message(message.chat.id, "ü§ñ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", parse_mode="Markdown")
        user_messages[message.chat.id] = sent_msg.message_id
    else:
        sent_msg = bot.send_message(
            message.chat.id,
            "‚ö† *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )
        user_messages[message.chat.id] = sent_msg.message_id

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    bot.infinity_polling()
