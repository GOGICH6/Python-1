import telebot
from telebot import types
import psycopg2

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è)
REQUIRED_CHANNEL = {"Oxide_Vzlom": "https://t.me/Oxide_Vzlom"}
# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π) –∫–∞–Ω–∞–ª (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è)
OPTIONAL_CHANNEL = {"ChatByOxide": "https://t.me/ChatByOxide"}

# –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥—ã –ø–æ –∏–≥—Ä–µ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
download_links = {
    "Oxide": {
        "Android": "https://t.me/+dxcSK08NRmxjNWRi",
        "iOS": "https://t.me/+U3QzhcTHKv1lNmMy"
    },
    "Standoff2": {
        "Android": "https://t.me/+fgN29Y8PjTNhZWFi",
        "iOS": None  # –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è iOS
    }
}

# –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É¬ª (–æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã)
share_texts = {
    "Oxide": "‚Äì –º–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Oxide: Survival Island! ‚ù§Ô∏è",
    "Standoff2": "‚Äì –º–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Standoff 2! ‚ù§Ô∏è"
}

# –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–æ–≤ (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
mod_info = {
    "Oxide": None,
    "Standoff2": None
}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
user_game = {}    # user_id -> –∏–≥—Ä–∞
user_system = {}  # user_id -> –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
def is_subscribed_to_required(user_id):
    for _, channel_link in REQUIRED_CHANNEL.items():
        # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        if channel_link.startswith("https://t.me/"):
            username = channel_link.split("/")[-1]
        else:
            username = channel_link
        try:
            member = bot.get_chat_member(f"@{username}", user_id)
            status = member.status
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user {user_id} –≤ {username}: {e}")
            return False
        if status not in ['member', 'administrator', 'creator']:
            return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–≤—ã–±–æ—Ä –∏–≥—Ä—ã)
@bot.message_handler(commands=['start'])
def start_command(message):
    if message.chat.type != "private":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("Oxide", callback_data="select_game_oxide")
    btn2 = types.InlineKeyboardButton("Standoff 2", callback_data="select_game_standoff")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:*", parse_mode="Markdown", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data in ["select_game_oxide", "select_game_standoff"])
def callback_select_game(call):
    user_id = call.from_user.id
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
    game = "Oxide" if call.data == "select_game_oxide" else "Standoff2"
    user_game[user_id] = game
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    markup = types.InlineKeyboardMarkup()
    btn_android = types.InlineKeyboardButton("üì± Android", callback_data="select_android")
    btn_ios = types.InlineKeyboardButton("üçè iOS", callback_data="select_ios")
    markup.add(btn_android, btn_ios)
    bot.send_message(call.message.chat.id, "üîπ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:*", parse_mode="Markdown", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Android –∏–ª–∏ iOS)
@bot.callback_query_handler(func=lambda call: call.data in ["select_android", "select_ios"])
def callback_select_platform(call):
    user_id = call.from_user.id
    platform = "Android" if call.data == "select_android" else "iOS"
    user_system[user_id] = platform
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    game = user_game.get(user_id, "Oxide")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    link = download_links.get(game, {}).get(platform)
    if link:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
        markup = types.InlineKeyboardMarkup()
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã (—Å–Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π)
        for name, url in REQUIRED_CHANNEL.items():
            markup.add(types.InlineKeyboardButton(f"üì¢ {name}", url=url))
        for name, url in OPTIONAL_CHANNEL.items():
            markup.add(types.InlineKeyboardButton(f"üì¢ {name}", url=url))
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
        bot.send_message(call.message.chat.id,
                         "üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*\n"
                         "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".*",
                         parse_mode="Markdown", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç (–º–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
        bot.send_message(call.message.chat.id,
                         "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                         reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def callback_check_subscription(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    if is_subscribed_to_required(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            conn = psycopg2.connect("postgresql://neondb_owner:npg_G3VCfRiD0uwB@ep-late-sunset-a5ktl08d-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require")
            cur = conn.cursor()
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    reg_date TIMESTAMP DEFAULT NOW()
                );
            """)
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ —Ç–∞–∫–æ–π user_id —É–∂–µ –µ—Å—Ç—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
            cur.execute("""
                INSERT INTO users (user_id, reg_date)
                VALUES (%s, NOW())
                ON CONFLICT (user_id) DO NOTHING;
            """, (user_id,))
            conn.commit()
            cur.close()
            conn.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        game = user_game.get(user_id, "Oxide")
        platform = user_system.get(user_id, "Android")
        download_link = download_links.get(game, {}).get(platform)
        # –ö–Ω–æ–ø–∫–∏: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É, –æ–± –º–æ–¥–µ, —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –Ω–∞–∑–∞–¥
        markup = types.InlineKeyboardMarkup(row_width=2)
        share_text = share_texts.get(game, "")
        btn_share = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=share_text)
        btn_info = types.InlineKeyboardButton("‚ÑπÔ∏è –û–± –º–æ–¥–µ", callback_data="info_mod")
        support_link = OPTIONAL_CHANNEL.get("ChatByOxide") or next(iter(OPTIONAL_CHANNEL.values()), None)
        if support_link:
            btn_support = types.InlineKeyboardButton("üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_link)
        else:
            btn_support = types.InlineKeyboardButton("üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_info")
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
        markup.add(btn_share, btn_info, btn_support, btn_back)
        bot.send_message(chat_id,
                         f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
                         f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({download_link})\n\n"
                         f"‚ö† *–í–∞–∂–Ω–æ!* –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–∞—Å –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –∏ *–¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–° –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö!*",
                         parse_mode="Markdown", reply_markup=markup)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        bot.send_message(chat_id,
                         "‚ùå *–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" —Å–Ω–æ–≤–∞.",
                         parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –û–± –º–æ–¥–µ"
@bot.callback_query_handler(func=lambda call: call.data == "info_mod")
def callback_mod_info(call):
    user_id = call.from_user.id
    game = user_game.get(user_id)
    info_text = mod_info.get(game)
    if info_text:
        bot.send_message(call.message.chat.id, info_text)
    else:
        bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" (–≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏)
@bot.callback_query_handler(func=lambda call: call.data == "support_info")
def callback_support_info(call):
    bot.send_message(call.message.chat.id,
                     "–î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à —á–∞—Ç: @ChatByOxide.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã)
@bot.callback_query_handler(func=lambda call: call.data == "back_to_start")
def callback_back_to_start(call):
    chat_id = call.message.chat.id
    # –í—ã–≤–æ–¥–∏–º –∑–∞–Ω–æ–≤–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã (—Ç–æ –∂–µ, —á—Ç–æ –ø—Ä–∏ /start)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("Oxide", callback_data="select_game_oxide")
    btn2 = types.InlineKeyboardButton("Standoff 2", callback_data="select_game_standoff")
    markup.add(btn1, btn2)
    bot.send_message(chat_id, "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:*", parse_mode="Markdown", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    if user_id != 1903057676:
        # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        bot.send_message(message.chat.id,
                         "ü§ñ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                         parse_mode="Markdown")
        return
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = psycopg2.connect("postgresql://neondb_owner:npg_G3VCfRiD0uwB@ep-late-sunset-a5ktl08d-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require")
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM users;")
        total_users = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM users WHERE reg_date >= NOW() - INTERVAL '24 hours';")
        last_24h = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM users WHERE reg_date >= NOW() - INTERVAL '48 hours';")
        last_48h = cur.fetchone()[0]
        cur.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    stats_message = (f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                     f"–ó–∞ 24 —á–∞—Å–∞: {last_24h}\n"
                     f"–ó–∞ 48 —á–∞—Å–æ–≤: {last_48h}")
    bot.send_message(message.chat.id, stats_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)
@bot.message_handler(func=lambda message: message.chat.type == "private")
def fallback_message(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.text and message.text.startswith('/'):
        cmd = message.text.split()[0][1:].split('@')[0].lower()
        if cmd in ['start', 'admin']:
            return
    bot.send_message(message.chat.id,
                     "ü§ñ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                     parse_mode="Markdown")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
    try:
        conn = psycopg2.connect("postgresql://neondb_owner:npg_G3VCfRiD0uwB@ep-late-sunset-a5ktl08d-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require")
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                reg_date TIMESTAMP DEFAULT NOW()
            );
        """)
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    bot.infinity_polling()
                                
