import telebot
import requests
import psycopg2
from telebot import types
from datetime import datetime, timedelta

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DATABASE_URL = 'postgresql://neondb_owner:npg_G3VCfRiD0uwB@ep-late-sunset-a5ktl08d-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require'
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE,
        registered_at TIMESTAMP
    )
""")
conn.commit()

# –¢–≤–æ–π Telegram ID –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
ADMIN_ID = 1903057676

# --- –ö–∞–Ω–∞–ª—ã –∏ —Å—Å—ã–ª–∫–∏ ---
NO_CHECK_CHANNEL = {"1 –∫–∞–Ω–∞–ª": "https://t.me/+gQzXZwSO5cliNGJi"}
REQUIRED_CHANNELS = {
    "2 –∫–∞–Ω–∞–ª": "https://t.me/ChatByOxide",
    "3 –∫–∞–Ω–∞–ª": "https://t.me/Oxide_Vzlom"
}
DOWNLOAD_ANDROID = "https://t.me/+dxcSK08NRmxjNWRi"
DOWNLOAD_IOS = "https://t.me/+U3QzhcTHKv1lNmMy"
SHARE_TEXT = "‚Äì –º–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Oxide: Survival Island! ‚ù§Ô∏è"
user_system = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –ë–î ---
def save_user_id(user_id):
    cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, registered_at) VALUES (%s, %s)",
            (user_id, datetime.utcnow())
        )
        conn.commit()

def count_users_since(hours):
    time_limit = datetime.utcnow() - timedelta(hours=hours)
    cursor.execute("SELECT COUNT(*) FROM users WHERE registered_at >= %s", (time_limit,))
    return cursor.fetchone()[0]

def total_users():
    cursor.execute("SELECT COUNT(*) FROM users")
    return cursor.fetchone()[0]

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.chat.type != "private":
        return

    save_user_id(message.from_user.id)

    markup = types.InlineKeyboardMarkup()
    android = types.InlineKeyboardButton("üì± Android", callback_data="select_android")
    ios = types.InlineKeyboardButton("üçè iOS", callback_data="select_ios")
    markup.add(android, ios)

    bot.send_message(
        message.chat.id,
        "üîπ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:*",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    count_24h = count_users_since(24)
    count_48h = count_users_since(48)
    count_all = total_users()

    bot.send_message(
        message.chat.id,
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
        f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {count_24h}\n"
        f"‚Ä¢ –ó–∞ 48 —á–∞—Å–æ–≤: {count_48h}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {count_all}",
        parse_mode="Markdown"
    )

# --- –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä –û–° ---
def is_subscribed(user_id):
    for _, link in REQUIRED_CHANNELS.items():
        username = link.split("/")[-1]
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{username}&user_id={user_id}"
        response = requests.get(url).json()
        if response.get('result', {}).get('status') not in ['member', 'administrator', 'creator']:
            return False
    return True

@bot.callback_query_handler(func=lambda call: call.data in ["select_android", "select_ios"])
def select_system(call):
    user_id = call.from_user.id
    system = "Android" if call.data == "select_android" else "iOS"
    user_system[user_id] = system

    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [types.InlineKeyboardButton(name, url=link) for name, link in {**NO_CHECK_CHANNEL, **REQUIRED_CHANNELS}.items()]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

    bot.send_message(
        call.message.chat.id,
        "üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".*",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id

    if is_subscribed(user_id):
        system = user_system.get(user_id, "Android")
        link = DOWNLOAD_ANDROID if system == "Android" else DOWNLOAD_IOS

        markup = types.InlineKeyboardMarkup()
        share_button = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=SHARE_TEXT)
        markup.add(share_button)

        bot.send_message(
            call.message.chat.id,
            f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({link})\n\n"
            f"‚ö† *–í–∞–∂–Ω–æ!* –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–∞—Å –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –∏ *–¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–° –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö!*",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        bot.send_message(
            call.message.chat.id,
            "‚ùå *–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )

# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(func=lambda m: m.chat.type == "private")
def unknown(m):
    bot.send_message(
        m.chat.id,
        "ü§ñ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        parse_mode="Markdown"
    )

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
