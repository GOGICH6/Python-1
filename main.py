import telebot
import requests
from telebot import types

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –ö–∞–Ω–∞–ª—ã
NO_CHECK_CHANNEL = {"1 –∫–∞–Ω–∞–ª": "https://t.me/+gQzXZwSO5cliNGJi"}  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
REQUIRED_CHANNELS = {
    "2 –∫–∞–Ω–∞–ª": "https://t.me/ChatByOxide",
    "3 –∫–∞–Ω–∞–ª": "https://t.me/Oxide_Vzlom"
}

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
APK_LINKS = {
    "Oxide": {
        "Android": "https://t.me/+dxcSK08NRmxjNWRi",
        "iOS": "https://t.me/+U3QzhcTHKv1lNmMy"
    },
    "Standoff 2": {
        "Android": "https://t.me/+fgN29Y8PjTNhZWFi",
        "iOS": None  # –ù–µ—Ç –≤–µ—Ä—Å–∏–∏ –¥–ª—è iOS
    }
}

# –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥—É
SHARE_TEXT = "‚Äì –º–æ–π –ª—é–±–∏–º—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Oxide: Survival Island! ‚ù§Ô∏è"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id):
    for channel_name, channel_link in REQUIRED_CHANNELS.items():
        channel_username = channel_link.split("/")[-1]
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{channel_username}&user_id={user_id}"
        response = requests.get(url).json()
        status = response.get('result', {}).get('status')
        if status not in ['member', 'administrator', 'creator']:
            return False  
    return True  

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–≤—ã–±–æ—Ä –∏–≥—Ä—ã)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.chat.type != "private":
        return  

    user_id = message.from_user.id
    user_data[user_id] = {}

    markup = types.InlineKeyboardMarkup()
    oxide_button = types.InlineKeyboardButton("Oxide: Survival Island", callback_data="game_oxide")
    standoff_button = types.InlineKeyboardButton("Standoff 2", callback_data="game_standoff")
    markup.add(oxide_button, standoff_button)

    bot.send_message(message.chat.id, "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥:*", parse_mode="Markdown", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
def select_game(call):
    user_id = call.from_user.id
    game = "Oxide" if call.data == "game_oxide" else "Standoff 2"
    user_data[user_id]["game"] = game

    markup = types.InlineKeyboardMarkup()
    android_button = types.InlineKeyboardButton("üì± Android", callback_data="system_android")
    ios_button = types.InlineKeyboardButton("üçè iOS", callback_data="system_ios")
    markup.add(android_button, ios_button)

    bot.edit_message_text("üîπ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:*", call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –û–°
@bot.callback_query_handler(func=lambda call: call.data.startswith("system_"))
def select_system(call):
    user_id = call.from_user.id
    system = "Android" if call.data == "system_android" else "iOS"
    user_data[user_id]["system"] = system

    game = user_data[user_id].get("game")
    if not game:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É.")
        return

    apk_link = APK_LINKS.get(game, {}).get(system)
    if apk_link:
        markup = types.InlineKeyboardMarkup(row_width=3)
        buttons = [types.InlineKeyboardButton(name, url=link) for name, link in {**NO_CHECK_CHANNEL, **REQUIRED_CHANNELS}.items()]
        markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

        bot.edit_message_text(
            "üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".*",
            call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup
        )
    else:
        bot.edit_message_text(
            "‚ùå *–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ APK –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*",
            call.message.chat.id, call.message.message_id, parse_mode="Markdown"
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id
    game = user_data.get(user_id, {}).get("game")
    system = user_data.get(user_id, {}).get("system")

    if not game or not system:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –∏–ª–∏ —Å–∏—Å—Ç–µ–º—É.")
        return

    apk_link = APK_LINKS.get(game, {}).get(system)
    if not apk_link:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞! APK –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    if is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        share_button = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=SHARE_TEXT)
        about_button = types.InlineKeyboardButton("‚ÑπÔ∏è –û–± –º–æ–¥–µ", callback_data="about_mod")
        markup.add(share_button)
        markup.add(about_button)

        bot.edit_message_text(
            f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({apk_link})\n\n"
            f"‚ö† *–í–∞–∂–Ω–æ!* –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–∞—Å –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –∏ *–¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–° –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö!*",
            call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup
        )
    else:
        bot.send_message(
            call.message.chat.id,
            "‚ùå *–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –û–± –º–æ–¥–µ"
@bot.callback_query_handler(func=lambda call: call.data == "about_mod")
def about_mod(call):
    user_id = call.from_user.id
    game = user_data.get(user_id, {}).get("game", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã")

    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="check_subscription")
    markup.add(back_button)

    bot.edit_message_text(
        f"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ –¥–ª—è {game} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
        call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
@bot.message_handler(func=lambda message: message.chat.type == "private")
def handle_unknown_command(message):
    bot.send_message(
        message.chat.id,
        "ü§ñ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        parse_mode="Markdown"
    )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    bot.infinity_polling()
