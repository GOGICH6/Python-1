import telebot
import requests
from telebot import types
from datetime import datetime, timedelta

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7812547873:AAFhjkRFZ5wGzZn4BCcOPjAAdgEZBRc4bq8'
bot = telebot.TeleBot(TOKEN)

# –ê–¥–º–∏–Ω ID
ADMIN_ID = 1903057676  

# –ö–∞–Ω–∞–ª—ã
NO_CHECK_CHANNEL = {"1 –∫–∞–Ω–∞–ª": "https://t.me/+gQzXZwSO5cliNGJi"}
REQUIRED_CHANNELS = {
    "2 –∫–∞–Ω–∞–ª": "https://t.me/ChatByOxide",
    "3 –∫–∞–Ω–∞–ª": "https://t.me/Oxide_Vzlom"
}
DOWNLOAD_CHANNEL_LINK = "https://t.me/+dxcSK08NRmxjNWRi"

# –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥—É
SHARE_TEXT = "- –ª—É—á—à–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∏—Ç –Ω–∞ Oxide!"

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id):
    for channel_name, channel_link in REQUIRED_CHANNELS.items():
        channel_username = channel_link.split("/")[-1]
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id=@{channel_username}&user_id={user_id}"
        response = requests.get(url).json()
        status = response.get('result', {}).get('status')
        if status not in ['member', 'administrator', 'creator']:
            return False  
    return True  

# üìå –õ–æ–≤–∏–º /start (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_data[message.from_user.id] = datetime.now()  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if is_subscribed(message.from_user.id):
        markup = types.InlineKeyboardMarkup()
        share_button = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=SHARE_TEXT)
        markup.add(share_button)

        bot.send_message(
            message.chat.id, 
            f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:* [üëâ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({DOWNLOAD_CHANNEL_LINK})\n\n"
            f"‚ö† *–í–∞–∂–Ω–æ!* –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–∞—Å –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –∏ *–¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–° –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö!*",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup(row_width=3)
        buttons = [types.InlineKeyboardButton(name, url=link) for name, link in {**NO_CHECK_CHANNEL, **REQUIRED_CHANNELS}.items()]
        markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

        bot.send_message(
            message.chat.id,
            "üì¢ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ.*\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".*",
            parse_mode="Markdown",
            reply_markup=markup
        )

# üìå –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è)
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    markup = types.InlineKeyboardMarkup()
    stats_btn = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    notify_btn = types.InlineKeyboardButton("üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data="admin_notify")
    markup.add(stats_btn, notify_btn)

    bot.send_message(message.chat.id, "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="Markdown", reply_markup=markup)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def admin_buttons(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    if call.data == "admin_stats":
        bot.send_message(call.message.chat.id, get_statistics(), parse_mode="Markdown")

    elif call.data == "admin_notify":
        bot.send_message(call.message.chat.id, "üì¢ *–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*", parse_mode="Markdown")
        bot.register_next_step_handler(call.message, confirm_broadcast)

# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_statistics():
    total_users = len(user_data)
    now = datetime.now()

    last_24h = sum(1 for date in user_data.values() if now - date <= timedelta(hours=24))
    last_48h = sum(1 for date in user_data.values() if now - date <= timedelta(hours=48))
    last_month = sum(1 for date in user_data.values() if now - date <= timedelta(days=30))

    return f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n" \
           f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n" \
           f"üìÖ *–ó–∞ 24 —á–∞—Å–∞:* {last_24h}\n" \
           f"üìÖ *–ó–∞ 48 —á–∞—Å–æ–≤:* {last_48h}\n" \
           f"üìÖ *–ó–∞ –º–µ—Å—è—Ü:* {last_month}"

# üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
def confirm_broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return

    markup = types.InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_broadcast")
    cancel_btn = types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_broadcast")
    markup.add(confirm_btn, cancel_btn)

    bot.send_message(message.chat.id, f"üì¢ *–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?*\n\n{message.text}", parse_mode="Markdown", reply_markup=markup)

    bot.register_next_step_handler(message, lambda msg: save_broadcast(msg, message.text))

# üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_message = ""

def save_broadcast(msg, text):
    global broadcast_message
    broadcast_message = text

# üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_broadcast", "cancel_broadcast"])
def handle_broadcast_confirmation(call):
    global broadcast_message

    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    if call.data == "confirm_broadcast":
        send_broadcast(broadcast_message)
        bot.send_message(call.message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        broadcast_message = ""

    elif call.data == "cancel_broadcast":
        bot.send_message(call.message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        broadcast_message = ""

# üìå –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
def send_broadcast(message_text):
    sent_count = 0
    for user_id in user_data.keys():
        try:
            bot.send_message(user_id, message_text, parse_mode="Markdown")
            sent_count += 1
        except:
            continue
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    bot.infinity_polling()
